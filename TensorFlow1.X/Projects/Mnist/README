Mnist手写数字识别:
    * 数据集:
        1. 特征值
            28 * 28
        2. 目标值
            ont-hot
            [1, 0, ...0]
            [0, 1, ...0]
            [0, 0, ...1]

        3. 获取
            from tensorflow.examples.tutorials.mnist import input_data
            mnist = input_data.read_data_sets(path, one_hot=True)
                - mnist.train.next_batch(100) 提供批量获取功能
                - mnist.train.images, labels
                - mnist.test.images. labels

    * 实战:
        全连接
        y = w1x1 + w2x2 + ... + wnxn
        x[None, 784] * weights[784, 10] + bias[10] = y[None, 10]     None表示样本数
        NN = tf.nn.softmax_cross_entropy_with_logits(labels=y_true, logits=y_predict, name=None)
        error = tf.reduce_mean(NN)

    * 完善模型功能
        1.增加准确率计算
        2.增加变量tensorboard显示
        3.增加模型保存加载
        4.增加模型预测结果输出

        1) 如何计算准确率
            equal_list = tf.equal(tf.argmax(y, 1), tf.argmax(y_label, 1))
            accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))


2. CNNmnist案例分析

    2.1 第一层卷积网络
        卷积层
            32个filter, 大小5*5, 步长1, padding="SAME"
            tf.nn.conv2d(input, filter, strdies, padding)
            input: 输入图像 [None, 28, 28, 1]
                要求 形状[batch, height, width, channels]
                    类型float32, 64
            filter:
                weights = tf.Variable(initval_value=tf.random_normal(shape=[5, 5, 1, 32]))
                bias = tf.Variable(initval_value=tf.random_normal(shape=[32]))
                变量initval_value=random_normal(shape=[F, F, 3/1, K])
            strides:
                步长1
                [1, 1, 1, 1]
            padding: "SAME"

        激活层
            Relu
        池化层
            大小2*2, 步长2
            输入形状 [None, 28, 28, 32]
            输出形状 [None, 14, 14, 32]

    2.2 第二个卷积网络
        卷积层
            64个filter, 大小5*5, 步长1, padding="SAME"
            输入: [None, 14, 14, 32]
            tf.nn.conv2d(input, filter, strdies, padding)
            input: 输入图像 [None, 14, 14, 32]
                要求 形状[batch, height, width, channels]
                    类型float32, 64
            filter:
                weights = tf.Variable(initval_value=tf.random_normal(shape=[5, 5, 32, 64]))
                bias = tf.Variable(initval_value=tf.random_normal(shape=[64]))
                变量initval_value=random_normal(shape=[F, F, 3/1, K])
            strides:
                步长1
                [1, 1, 1, 1]
            padding: "SAME"
            输出形状 [None, 14, 14, 64]
        激活层
            Relu
        池化层
            大小2*2, 步长2
            输入形状 [None, 14, 14, 64]
            输出形状 [None,  7,  7, 64]

    2.3 全连接
        tf.reshape([-1, 7*7*64])
        [None, 7, 7, 64] -> [None, 7*7*64]
        [None, 7*7*64] * [7*7*64, 10] = [None, 10]
        tf.matmul(pool2, weights) + bais

