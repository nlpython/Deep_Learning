验证码识别:
    1) 数据集
        图片1 -> NZPP
        手写数字的图片 -> 0~9之间的某个数  一个样本对应一个目标值
        一样样本对应4个目标值
        切割不具有通用性
        NZPP -> [13, 25, 15, 15] -> [[0, 0, ...],[...],[...],[...]]
    2) 对数据集中
        特征值, 目标值
    3) 如何分类?
        衡量损失
            手写数字识别:
                交叉熵, softmax
            此时二维结果如果仍用softmax函数, 并对这两个104个元素的一节张量计算交叉熵损失, 会存在损失过大且无法减小的问题.
            softmax交叉熵适合计算类别互斥的离散分类任务的损失值, 每个输出对应一个类别
            如果遇到需要预测4个真实值的情况, 需要使用sigmoid交叉熵计算损失
        准确率计算
            核心: 对比真实值和预测值所在位置
            手写数字识别案例:
                y_predict [None, 10]
                tf.argmax(y_predict, axis=1)

            y_predict [None, 4, 26]
            tf.argmax(y_predict, axis=1)
            [True, True, False, True]
            -> tf.reduce_all() -> True/False -> tf.float32

    * 流程分析
        1. 图片读取
            filename -> 标签值
        2. 解析csv文件, 将标签纸NZPP -> [13, 25, 15, 15]
        3. 将filename和标签纸联系起来
        4. 构建卷积神经网络 -> y_predict
        5. 构造损失, 优化损失
        6. 开启会话, 开启线程

